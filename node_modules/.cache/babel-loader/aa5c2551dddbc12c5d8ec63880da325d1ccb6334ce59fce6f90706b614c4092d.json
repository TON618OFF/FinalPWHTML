{"ast":null,"code":"var _jsxFileName = \"D:\\\\Vyacheslav\\\\Study\\\\\\u0420\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u043D\\u044B\\u0445 \\u043C\\u043E\\u0434\\u0443\\u043B\\u0435\\u0439\\\\practice 13\\\\json\\\\src\\\\pages\\\\ProfilePage.js\",\n  _s = $RefreshSig$();\n// ProfilePage.js\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfilePage = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const history = useHistory();\n  const handleLogin = () => {\n    // Ваша логика для аутентификации пользователя\n    // Например, проверка логина и пароля, установка состояния isAuthenticated в true\n    // Для примера, сделаем простой вход по нажатию кнопки\n    // В реальном приложении замените на соответствующую логику\n    // Например, вызов API для аутентификации\n    // Или сохранение состояния аутентификации в localStorage или sessionStorage\n\n    // Предположим, пользователь успешно вошел\n    setIsAuthenticated(true);\n    history.push('/profile'); // Переход на страницу профиля\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), isAuthenticated ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0434\\u0435\\u0441\\u044C \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F \\u043E \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435 \\u0438 \\u0435\\u0433\\u043E \\u0438\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u043E\\u043C.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u0445\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfilePage, \"miuUui3x/ogj3hFLZVEYH1M4fUA=\", false, function () {\n  return [useHistory];\n});\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","ProfilePage","_s","isAuthenticated","setIsAuthenticated","history","handleLogin","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Vyacheslav/Study/Разработка программных модулей/practice 13/json/src/pages/ProfilePage.js"],"sourcesContent":["// ProfilePage.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst ProfilePage = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const handleLogin = () => {\r\n    // Ваша логика для аутентификации пользователя\r\n    // Например, проверка логина и пароля, установка состояния isAuthenticated в true\r\n    // Для примера, сделаем простой вход по нажатию кнопки\r\n    // В реальном приложении замените на соответствующую логику\r\n    // Например, вызов API для аутентификации\r\n    // Или сохранение состояния аутентификации в localStorage или sessionStorage\r\n\r\n    // Предположим, пользователь успешно вошел\r\n    setIsAuthenticated(true);\r\n    history.push('/profile'); // Переход на страницу профиля\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-page\">\r\n      <h1>Профиль пользователя</h1>\r\n      {isAuthenticated ? (\r\n        <p>Здесь будет информация о пользователе и его избранном.</p>\r\n      ) : (\r\n        <div className=\"login-form\">\r\n          <h2>Вход</h2>\r\n          <button onClick={handleLogin}>Войти</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMQ,OAAO,GAAGP,UAAU,CAAC,CAAC;EAE5B,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA;IACA;IACA;IACA;IACA;;IAEA;IACAF,kBAAkB,CAAC,IAAI,CAAC;IACxBC,OAAO,CAACE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,oBACEP,OAAA;IAAKQ,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BT,OAAA;MAAAS,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5BV,eAAe,gBACdH,OAAA;MAAAS,QAAA,EAAG;IAAsD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE7Db,OAAA;MAAKQ,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBT,OAAA;QAAAS,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbb,OAAA;QAAQc,OAAO,EAAER,WAAY;QAAAG,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACX,EAAA,CA9BID,WAAW;EAAA,QAECH,UAAU;AAAA;AAAAiB,EAAA,GAFtBd,WAAW;AAgCjB,eAAeA,WAAW;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}